teacher_forcing_ratio = 1

def train(input_tensor, target_tensor, encoder, decoder, encoder_optimizer, decoder_optimizer, criterion, max_length=MAX_LENGTH, 
use_beam=False, beam_width=1):
    encoder_hidden = encoder.initHidden()

    encoder_optimizer.zero_grad()
    decoder_optimizer.zero_grad()

    input_length = input_tensor.size(0)
    target_length = target_tensor.size(0)

    encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)

    loss = 0

    for ei in range(input_length):
      encoder_output, encoder_hidden = encoder(
          input_tensor[ei], encoder_hidden)
      encoder_outputs[ei] = encoder_output[0, 0]

    decoder_input = torch.tensor([[SOS_token]], device=device)

    decoder_hidden = encoder_hidden

    use_teacher_forcing = True if random.random() < teacher_forcing_ratio else False

    if use_teacher_forcing:
        # Teacher forcing: Feed the target as the next input
        for di in range(target_length):
            decoder_output, decoder_hidden, decoder_attention = decoder(
                decoder_input, decoder_hidden, encoder_outputs)
            loss += criterion(decoder_output, target_tensor[di])
            decoder_input = target_tensor[di]  # Teacher forcing

    else:
        # Without teacher forcing: use its own predictions as the next input
        if not use_beam:
            for di in range(target_length):
                decoder_output, decoder_hidden, decoder_attention = decoder(
                    decoder_input, decoder_hidden, encoder_outputs)

                topv, topi = decoder_output.topk(1)
        
                decoder_input = topi.squeeze().detach()  # detach from history as input

                loss += criterion(decoder_output, target_tensor[di])
                if decoder_input.item() == EOS_token:
                    break
        else:
        # =============== BEAM SEARCH IMPLEMENTATION SHOULD START HERE ==================
            n = beam_width
            parents = []; children = []
            answers = []
            
            root = BeamNode(None, decoder_input, None, None)
            parents.append(root)
            while parents != []:
                # Process all parents
                for node in parents:
                    if node.depth < target_length and node.decoder_input.item() != EOS_token:
                        decoder_output, decoder_hidden, decoder_attention = decoder(
                            node.decoder_input, decoder_hidden, encoder_outputs)

                        # select n best for each node
                        topv, topi = decoder_output.topk(n)
                        if n == 1:
                            decoder_inputs = topi.squeeze().detach()
                            children.append(BeamNode(topv, decoder_inputs, node, decoder_output))
                        else:
                            decoder_inputs = topi[0].squeeze().detach()
                            for i in range(n):
                                children.append(BeamNode(topv[0][i], decoder_inputs[i], node, decoder_output))
                    else:
                        # node.give_eos_penalty(input_length)
                        answers.append(node)
                
                # filter all childrens
                parents = sorted(children, reverse=True)[:n]
                children = []
            
            ans = max(answers)
            while ans.parent != None:
                loss += criterion(ans.carry, target_tensor[ans.depth - 1])
                ans = ans.parent
        # =============== BEAM SEARCH IMPLEMENTATION SHOULD END HERE ====================

    loss.backward()

    encoder_optimizer.step()
    decoder_optimizer.step()

    return loss.item() / target_length